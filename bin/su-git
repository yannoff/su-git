#!/bin/bash
#
# @author  yannoff <https://github.com/yannoff>
# @project su-git
# @license MIT
#
set -f

# Initialize core variables required to build the docker command
host=`hostname`
user=`whoami`
group=`id -gn`
uid=`id -u`
gid=`id -g`
gitbin=git
dockerimg=yannoff/gitbox
known_hosts=$HOME/.ssh/known_hosts
# Use the GIT_IDENTITY env var as default
identity=${GIT_IDENTITY}

err_message() {
    printf "$@"
    exit 1
}

usage() {
    cat <<-EOT
Usage:
       su-git [OPTIONS] <command>

Options:
      --identity <file>         Path to the private key file. 
                                Alternatively, this setting may be passed via the GIT_IDENTITY environment variable or stored using git-config: git config ssh.identity <file>
      --known-hosts <file>      Alternative path to the RSA known hosts file (default path used: ~/.ssh/known_hosts)

      --help                    Display  help informations and exit.

      --verbose                 Print debug informations at runtime.

Commands:
       Whatever command recognized by git. See the git(1) help section
EOT
}

# Iterate over su-git command line invocation
# Detect and extract identity file, trusted host, known hosts file (if option passed),
# remove it from args, then rebuild the whole command-line without
args=()
while [ $# -gt 0 ]
do
    case $1 in
        # Support passing options in the --option=value fashion
        --*=*)
            arg=$1
            option=${arg%%=*}
            value=${arg##*=}
            shift 1
            set -- ${option} ${value} $@
            ;;
        --help|-h)
            usage
            exit 0
            ;;
        --verbose)
            verbose=1
            shift 1
            ;;
        --identity)
            identity=$2
            shift 2
            ;;
        --known-host)
            known_host=$2
            shift 2
            ;;
        *)
            args+=("$1")
            shift
            ;;
    esac
done

cmd=${args[0]}

topdir=$PWD
cwd=
if [ "$cmd" != "clone" ]
then
    # Recursively traverse to find git top-level directory
    # and build relative CWD
    subdirs=()
    while [ ! -d "$topdir/.git" -a ! "$topdir" = "/" ]
    do
        subdirs+=(`basename $topdir`)
        topdir=`dirname $topdir`
    done
    [ -z "$verbose" ] || echo -e "\e[01;33m[info] Git top-level directory: \e[00m$topdir"
    # Rebuild CWD upon subdirs array
    for f in "${subdirs[@]}"
    do
        cwd=$f/$cwd
    done
    [ -z "$verbose" ] || echo -e "\e[01;33m[info] Current work directory: \e[00m./$cwd"
    # If not passed as an option, try to fetch identity file from config
    [ -z "$identity" ] && identity=`git config ssh.identity`
else
    [ -z "$identity" ] && err_message "Please specify an identity file either via the GIT_IDENTITY env variable or the --identity option:\n\tsu-git --identity /path/to/private_rsa ${args[*]}\n\n"
    printf "Would you like to store %s as identity file for this repo? (y/N)" $identity
    read autostore
fi
[ -z "$identity" ] && err_message "No identity file configured. Exiting.\n\nPlease use either the GIT_IDENTITY env var, the --identity option or configure it using: git config ssh.identity /path/to/private_rsa .\n\n"

[ -f "$known_hosts" ] || err_message "\nCould not stat the known hosts file at default location \"%s\".\nPlease consider either creating it or giving an alternate location using --known-hosts option.\n\n" $known_hosts

# Build base docker command
d=( docker run )
# Remove container after run
d+=( --rm )
# Run in interactive mode, allocate a TTY
d+=( -it )
# Set container hostname
d+=( -h $host )
# Set container USER env variable
d+=( -e USER=$user )
# Define working dir
d+=( -w /app/src/$cwd )
# Bind-mount top-level dir
d+=( -v $topdir:/app/src/$cwd )
# Bind-mount identity file
d+=( -v $identity:/app/ssh/id_rsa )
# Bind-mount userland's git config, if appropriate
[ -f "$HOME/.gitconfig" ] && d+=( -v $HOME/.gitconfig:/etc/gitconfig )
# Bind-mount $SSH/known_hosts config file
d+=( -v $known_hosts:/app/ssh/known_hosts )

docker_command=${d[@]}

# Print verbose informations
[ -z "$verbose" ] || echo -e "\e[01;32m[exec]\e[00m "$docker_command $dockerimg ${gitbin} "${args[@]}"

$docker_command $dockerimg ${gitbin} "${args[@]}"

# If the user wanted his identity file stored automatically, let's do it
if [ "$cmd" = "clone" -a "$autostore" = "y" ]
then
    argc=${#args[@]}
    let argc-=1
    repodir=`basename ${args[$argc]} .git`
    cd $repodir
    [ -z "$verbose" ] || echo -e "\e[01;33m[info] Executing: \e[00mgit config ssh.identity $identity"
    git config ssh.identity $identity
fi
